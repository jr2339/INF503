import random

#######################################################################################
#Due to our genome is not too long, so I will not put them in to a txt file
G = '''
AGTTGTTAGTCTACGTGGACCGACAAAGACAGATTCTTTGAGGGAGCTAAGCTCAACGTAGTTCTAACAGTTTTTTAATTAGAGAGCAGATCTCTGATGAATAACCAACGGAAAAAGGCGAAAAACACGCCTTTCAATATGCTGAAACGCGAGAGAAACCGCGTGTCGACTGTGCAACAGCTGACAAAGAGATTCTCACTTGGAATGCTGCAGGGACGAGGACCATTAAAACTGTTCATGGCCCTGGTGGCGTTCCTTCGTTTCCTAACAATCCCACCAACAGCAGGGATATTGAAGAGATGGGGAACAATTAAAAAATCAAAAGCTATTAATGTTTTGAGAGGGTTCAGGAAAGAGATTGGAAGGATGCTGAACATCTTGAATAGGAGACGCAGATCTGCAGGCATGATCATTATGCTGATTCCAACAGTGATGGCGTTCCATTTAACCACACGTAACGGAGAACCACACATGATCGTCAGCAGACAAGAGAAAGGGAAAAGTCTTCTGTTTAAAACAGAGGATGGCGTGAACATGTGTACCCTCATGGCCATGGACCTTGGTGAATTGTGTGAAGACACAATCACGTACAAGTGTCCCCTTCTCAGGCAGAATGAGCCAGAAGACATAGACTGTTGGTGCAACTCTACGTCCACGTGGGTAACTTATGGGACGTGTACCACCATGGGAGAACATAGAAGAGAAAAAAGATCAGTGGCACTCGTTCCACATGTGGGAATGGGACTGGAGACACGAACTGAAACATGGATGTCATCAGAAGGGGCCTGGAAACATGTCCAGAGAATTGAAACTTGGATCTTGAGACATCCAGGCTTCACCATGATGGCAGCAATCCTGGCATACACCATAGGAACGACACATTTCCAAAGAGCCCTGATTTTCATCTTACTGACAGCTGTCACTCCTTCAATGACAATGCGTTGCATAGGAATGTCAAATAGAGACTTTGTGGAAGGGGTTTCAGGAGGAAGCTGGGTTGACATAGTCTTAGAACATGGAAGCTGTGTGACGACGATGGCAAAAAACAAACCAACATTGGATTTTGAACTGATAAAAACAGAAGCCAAACAGCCTGCCACCCTAAGGAAGTACTGTATAGAGGCAAAGCTAACCAACACAACAACAGAATCTCGCTGCCCAACACAAGGGGAACCCAGCCTAAATGAAGAGCAGGACAAAAGGTTCGTCTGCAAACACTCCATGGTAGACAGAGGATGGGGAAATGGATGTGGACTATTTGGAAAGGGAGGCATTGTGACCTGTGCTATGTTCAGATGCAAAAAGAACATGGAAGGAAAAGTTGTGCAACCAGAAAACTTGGAATACACCATTGTGATAACACCTCACTCAGGGGAAGAGCATGCAGTCGGAAATGACACAGGAAAACATGGCAAGGAAATCAAAATAACACCACAGAGTTCCATCACAGAAGCAGAATTGACAGGTTATGGCACTGTCACAATGGAGTGCTCTCCAAGAACGGGCCTCGACTTCAATGAGATGGTGTTGCTGCAGATGGAAAATAAAGCTTGGCTGGTGCACAGGCAATGGTTCCTAGACCTGCCGTTACCATGGTTGCCCGGAGCGGACACACAAGGGTCAAATTGGATACAGAAAGAGACATTGGTCACTTTCAAAAATCCCCATGCGAAGAAACAGGATGTTGTTGTTTTAGGATCCCAAGAAGGGGCCATGCACACAGCACTTACAGGGGCCACAGAAATCCAAATGTCATCAGGAAACTTACTCTTCACAGGACATCTCAAGTGCAGGCTGAGAATGGACAAGCTACAGCTCAAAGGAATGTCATACTCTATGTGCACAGGAAAGTTTAAAGTTGTGAAGGAAATAGCAGAAACACAACATGGAACAATAGTTATCAGAGTGCAATATGAAGGGGACGGCTCTCCATGCAAGATCCCTTTTGAGATAATGGATTTGGAAAAAAGACATGTCTTAGGTCGCCTGATTACAGTCAACCCAATTGTGACAGAAAAAGATAGCCCAGTCAACATAGAAGCAGAACCTCCATTCGGAGACAGCTACATCATCATAGGAGTAGAGCCGGGACAACTGAAGCTCAACTGGTTTAAGAAAGGAAGTTCTATCGGCCAAATGTTTGAGACAACAATGAGGGGGGCGAAGAGAATGGCCATTTTAGGTGACACAGCCTGGGATTTTGGATCCTTGGGAGGAGTGTTTACATCTATAGGAAAGGCTCTCCACCAAGTCTTTGGAGCAATCTATGGAGCTGCCTTCAGTGGGGTTTCATGGACTATGAAAATCCTCATAGGAGTCATTATCACATGGATAGGAATGAATTCACGCAGCACCTCACTGTCTGTGACACTAGTATTGGTGGGAATTGTGACACTGTATTTGGGAGTCATGGTGCAGGCCGATAGTGGTTGCGTTGTGAGCTGGAAAAACAAAGAACTGAAATGTGGCAGTGGGATTTTCATCACAGACAACGTGCACACATGGACAGAACAATACAAGTTCCAACCAGAATCCCCTTCAAAACTAGCTTCAGCTATCCAGAAAGCCCATGAAGAGGGCATTTGTGGAATCCGCTCAGTAACAAGACTGGAGAATCTGATGTGGAAACAAATAACACCAGAATTGAATCACATTCTATCAGAAAATGAGGTGAAGTTAACTATTATGACAGGAGACATCAAAGGAATCATGCAGGCAGGAAAACGATCTCTGCGGCCTCAGCCCACTGAGCTGAAGTATTCATGGAAAACATGGGGCAAAGCAAAAATGCTCTCTACAGAGTCTCATAACCAGACCTTTCTCATTGATGGCCCCGAAACAGCAGAATGCCCCAACACAAATAGAGCTTGGAATTCGTTGGAAGTTGAAGACTATGGCTTTGGAGTATTCACCACCAATATATGGCTAAAATTGAAAGAAAAACAGGATGTATTCTGCGACTCAAAACTCATGTCAGCGGCCATAAAAGACAACAGAGCCGTCCATGCCGATATGGGTTATTGGATAGAAAGTGCACTCAATGACACATGGAAGATAGAGAAAGCCTCTTTCATTGAAGTTAAAAACTGCCACTGGCCAAAATCACACACCCTCTGGAGCAATGGAGTGCTAGAAAGTGAGATGATAATTCCAAAGAATCTCGCTGGACCAGTGTCTCAACACAACTATAGACCAGGCTACCATACACAAATAACAGGACCATGGCATCTAGGTAAGCTTGAGATGGACTTTGATTTCTGTGATGGAACAACAGTGGTAGTGACTGAGGACTGCGGAAATAGAGGACCCTCTTTGAGAACAACCACTGCCTCTGGAAAACTCATAACAGAATGGTGCTGCCGATCTTGCACATTACCACCGCTAAGATACAGAGGTGAGGATGGGTGCTGGTACGGGATGGAAATCAGACCATTGAAGGAGAAAGAAGAGAATTTGGTCAACTCCTTGGTCACAGCTGGACATGGGCAGGTCGACAACTTTTCACTAGGAGTCTTGGGAATGGCATTGTTCCTGGAGGAAATGCTTAGGACCCGAGTAGGAACGAAACATGCAATACTACTAGTTGCAGTTTCTTTTGTGACATTGATCACAGGGAACATGTCCTTTAGAGACCTGGGAAGAGTGATGGTTATGGTAGGCGCCACTATGACGGATGACATAGGTATGGGCGTGACTTATCTTGCCCTACTAGCAGCCTTCAAAGTCAGACCAACTTTTGCAGCTGGACTACTCTTGAGAAAGCTGACCTCCAAGGAATTGATGATGACTACTATAGGAATTGTACTCCTCTCCCAGAGCACCATACCAGAGACCATTCTTGAGTTGACTGATGCGTTAGCCTTAGGCATGATGGTCCTCAAAATGGTGAGAAATATGGAAAAGTATCAATTGGCAGTGACTATCATGGCTATCTTGTGCGTCCCAAACGCAGTGATATTACAAAACGCATGGAAAGTGAGTTGCACAATATTGGCAGTGGTGTCCGTTTCCCCACTGCTCTTAACATCCTCACAGCAAAAAACAGATTGGATACCATTAGCATTGACGATCAAAGGTCTCAATCCAACAGCTATTTTTCTAACAACCCTCTCAAGAACCAGCAAGAAAAGGAGCTGGCCATTAAATGAGGCTATCATGGCAGTCGGGATGGTGAGCATTTTAGCCAGTTCTCTCCTAAAAAATGATATTCCCATGACAGGACCATTAGTGGCTGGAGGGCTCCTCACTGTGTGCTACGTGCTCACTGGACGATCGGCCGATTTGGAACTGGAGAGAGCAGCCGATGTCAAATGGGAAGACCAGGCAGAGATATCAGGAAGCAGTCCAATCCTGTCAATAACAATATCAGAAGATGGTAGCATGTCGATAAAAAATGAAGAGGAAGAACAAACACTGACCATACTCATTAGAACAGGATTGCTGGTGATCTCAGGACTTTTTCCTGTATCAATACCAATCACGGCAGCAGCATGGTACCTGTGGGAAGTGAAGAAACAACGGGCCGGAGTATTGTGGGATGTTCCTTCACCCCCACCCATGGGAAAGGCTGAACTGGAAGATGGAGCCTATAGAATTAAGCAAAAAGGGATTCTTGGATATTCCCAGATCGGAGCCGGAGTTTACAAAGAAGGAACATTCCATACAATGTGGCATGTCACACGTGGCGCTGTTCTAATGCATAAAGGAAAGAGGATTGAACCATCATGGGCGGACGTCAAGAAAGACCTAATATCATATGGAGGAGGCTGGAAGTTAGAAGGAGAATGGAAGGAAGGAGAAGAAGTCCAGGTATTGGCACTGGAGCCTGGAAAAAATCCAAGAGCCGTCCAAACGAAACCTGGTCTTTTCAAAACCAACGCCGGAACAATAGGTGCTGTATCTCTGGACTTTTCTCCTGGAACGTCAGGATCTCCAATTATCGACAAAAAAGGAAAAGTTGTGGGTCTTTATGGTAATGGTGTTGTTACAAGGAGTGGAGCATATGTGAGTGCTATAGCCCAGACTGAAAAAAGCATTGAAGACAACCCAGAGATCGAAGATGACATTTTCCGAAAGAGAAGACTGACCATCATGGACCTCCACCCAGGAGCGGGAAAGACGAAGAGATACCTTCCGGCCATAGTCAGAGAAGCTATAAAACGGGGTTTGAGAACATTAATCTTGGCCCCCACTAGAGTTGTGGCAGCTGAAATGGAGGAAGCCCTTAGAGGACTTCCAATAAGATACCAGACCCCAGCCATCAGAGCTGAGCACACCGGGCGGGAGATTGTGGACCTAATGTGTCATGCCACATTTACCATGAGGCTGCTATCACCAGTTAGAGTGCCAAACTACAACCTGATTATCATGGACGAAGCCCATTTCACAGACCCAGCAAGTATAGCAGCTAGAGGATACATCTCAACTCGAGTGGAGATGGGTGAGGCAGCTGGGATTTTTATGACAGCCACTCCCCCGGGAAGCAGAGACCCATTTCCTCAGAGCAATGCACCAATCATAGATGAAGAAAGAGAAATCCCTGAACGTTCGTGGAATTCCGGACATGAATGGGTCACGGATTTTAAAGGGAAGACTGTTTGGTTCGTTCCAAGTATAAAAGCAGGAAATGATATAGCAGCTTGCCTGAGGAAAAATGGAAAGAAAGTGATACAACTCAGTAGGAAGACCTTTGATTCTGAGTATGTCAAGACTAGAACCAATGATTGGGACTTCGTGGTTACAACTGACATTTCAGAAATGGGTGCCAATTTCAAGGCTGAGAGGGTTATAGACCCCAGACGCTGCATGAAACCAGTCATACTAACAGATGGTGAAGAGCGGGTGATTCTGGCAGGACCTATGCCAGTGACCCACTCTAGTGCAGCACAAAGAAGAGGGAGAATAGGAAGAAATCCAAAAAATGAGAATGACCAGTACATATACATGGGGGAACCTCTGGAAAATGATGAAGACTGTGCACACTGGAAAGAAGCTAAAATGCTCCTAGATAACATCAACACGCCAGAAGGAATCATTCCTAGCATGTTCGAACCAGAGCGTGAAAAGGTGGATGCCATTGATGGCGAATACCGCTTGAGAGGAGAAGCAAGGAAAACCTTTGTAGACTTAATGAGAAGAGGAGACCTACCAGTCTGGTTGGCCTACAGAGTGGCAGCTGAAGGCATCAACTACGCAGACAGAAGGTGGTGTTTTGATGGAGTCAAGAACAACCAAATCCTAGAAGAAAACGTGGAAGTTGAAATCTGGACAAAAGAAGGGGAAAGGAAGAAATTGAAACCCAGATGGTTGGATGCTAGGATCTATTCTGACCCACTGGCGCTAAAAGAATTTAAGGAATTTGCAGCCGGAAGAAAGTCTCTGACCCTGAACCTAATCACAGAAATGGGTAGGCTCCCAACCTTCATGACTCAGAAGGCAAGAGACGCACTGGACAACTTAGCAGTGCTGCACACGGCTGAGGCAGGTGGAAGGGCGTACAACCATGCTCTCAGTGAACTGCCGGAGACCCTGGAGACATTGCTTTTACTGACACTTCTGGCTACAGTCACGGGAGGGATCTTTTTATTCTTGATGAGCGGAAGGGGCATAGGGAAGATGACCCTGGGAATGTGCTGCATAATCACGGCTAGCATCCTCCTATGGTACGCACAAATACAGCCACACTGGATAGCAGCTTCAATAATACTGGAGTTTTTTCTCATAGTTTTGCTTATTCCAGAACCTGAAAAACAGAGAACACCCCAAGACAACCAACTGACCTACGTTGTCATAGCCATCCTCACAGTGGTGGCCGCAACCATGGCAAACGAGATGGGTTTCCTAGAAAAAACGAAGAAAGATCTCGGATTGGGAAGCATTGCAACCCAGCAACCCGAGAGCAACATCCTGGACATAGATCTACGTCCTGCATCAGCATGGACGCTGTATGCCGTGGCCACAACATTTGTTACACCAATGTTGAGACATAGCATTGAAAATTCCTCAGTGAATGTGTCCCTAACAGCTATAGCCAACCAAGCCACAGTGTTAATGGGTCTCGGGAAAGGATGGCCATTGTCAAAGATGGACATCGGAGTTCCCCTTCTCGCCATTGGATGCTACTCACAAGTCAACCCCATAACTCTCACAGCAGCTCTTTTCTTATTGGTAGCACATTATGCCATCATAGGGCCAGGACTCCAAGCAAAAGCAACCAGAGAAGCTCAGAAAAGAGCAGCGGCGGGCATCATGAAAAACCCAACTGTCGATGGAATAACAGTGATTGACCTAGATCCAATACCTTATGATCCAAAGTTTGAAAAGCAGTTGGGACAAGTAATGCTCCTAGTCCTCTGCGTGACTCAAGTATTGATGATGAGGACTACATGGGCTCTGTGTGAGGCTTTAACCTTAGCTACCGGGCCCATCTCCACATTGTGGGAAGGAAATCCAGGGAGGTTTTGGAACACTACCATTGCGGTGTCAATGGCTAACATTTTTAGAGGGAGTTACTTGGCCGGAGCTGGACTTCTCTTTTCTATTATGAAGAACACAACCAACACAAGAAGGGGAACTGGCAACATAGGAGAGACGCTTGGAGAGAAATGGAAAAGCCGATTGAACGCATTGGGAAAAAGTGAATTCCAGATCTACAAGAAAAGTGGAATCCAGGAAGTGGATAGAACCTTAGCAAAAGAAGGCATTAAAAGAGGAGAAACGGACCATCACGCTGTGTCGCGAGGCTCAGCAAAACTGAGATGGTTCGTTGAGAGAAACATGGTCACACCAGAAGGGAAAGTAGTGGACCTCGGTTGTGGCAGAGGAGGCTGGTCATACTATTGTGGAGGACTAAAGAATGTAAGAGAAGTCAAAGGCCTAACAAAAGGAGGACCAGGACACGAAGAACCCATCCCCATGTCAACATATGGGTGGAATCTAGTGCGTCTTCAAAGTGGAGTTGACGTTTTCTTCATCCCGCCAGAAAAGTGTGACACATTATTGTGTGACATAGGGGAGTCATCACCAAATCCCACAGTGGAAGCAGGACGAACACTCAGAGTCCTTAACTTAGTAGAAAATTGGTTGAACAACAACACTCAATTTTGCATAAAGGTTCTCAACCCATATATGCCCTCAGTCATAGAAAAAATGGAAGCACTACAAAGGAAATATGGAGGAGCCTTAGTGAGGAATCCACTCTCACGAAACTCCACACATGAGATGTACTGGGTATCCAATGCTTCCGGGAACATAGTGTCATCAGTGAACATGATTTCAAGGATGTTGATCAACAGATTTACAATGAGATACAAGAAAGCCACTTACGAGCCGGATGTTGACCTCGGAAGCGGAACCCGTAACATCGGGATTGAAAGTGAGATACCAAACCTAGATATAATTGGGAAAAGAATAGAAAAAATAAAGCAAGAGCATGAAACATCATGGCACTATGACCAAGACCACCCATACAAAACGTGGGCATACCATGGTAGCTATGAAACAAAACAGACTGGATCAGCATCATCCATGGTCAACGGAGTGGTCAGGCTGCTGACAAAACCTTGGGACGTCGTCCCCATGGTGACACAGATGGCAATGACAGACACGACTCCATTTGGACAACAGCGCGTTTTTAAAGAGAAAGTGGACACGAGAACCCAAGAACCGAAAGAAGGCACGAAGAAACTAATGAAAATAACAGCAGAGTGGCTTTGGAAAGAATTAGGGAAGAAAAAGACACCCAGGATGTGCACCAGAGAAGAATTCACAAGAAAGGTGAGAAGCAATGCAGCCTTGGGGGCCATATTCACTGATGAGAACAAGTGGAAGTCGGCACGTGAGGCTGTTGAAGATAGTAGGTTTTGGGAGCTGGTTGACAAGGAAAGGAATCTCCATCTTGAAGGAAAGTGTGAAACATGTGTGTACAACATGATGGGAAAAAGAGAGAAGAAGCTAGGGGAATTCGGCAAGGCAAAAGGCAGCAGAGCCATATGGTACATGTGGCTTGGAGCACGCTTCTTAGAGTTTGAAGCCCTAGGATTCTTAAATGAAGATCACTGGTTCTCCAGAGAGAACTCCCTGAGTGGAGTGGAAGGAGAAGGGCTGCACAAGCTAGGTTACATTCTAAGAGACGTGAGCAAGAAAGAGGGAGGAGCAATGTATGCCGATGACACCGCAGGATGGGATACAAGAATCACACTAGAAGACCTAAAAAATGAAGAAATGGTAACAAACCACATGGAAGGAGAACACAAGAAACTAGCCGAGGCCATTTTCAAACTAACGTACCAAAACAAGGTGGTGCGTGTGCAAAGACCAACACCAAGAGGCACAGTAATGGACATCATATCGAGAAGAGACCAAAGAGGTAGTGGACAAGTTGGCACCTATGGACTCAATACTTTCACCAATATGGAAGCCCAACTAATCAGACAGATGGAGGGAGAAGGAGTCTTTAAAAGCATTCAGCACCTAACAATCACAGAAGAAATCGCTGTGCAAAACTGGTTAGCAAGAGTGGGGCGCGAAAGGTTATCAAGAATGGCCATCAGTGGAGATGATTGTGTTGTGAAACCTTTAGATGACAGGTTCGCAAGCGCTTTAACAGCTCTAAATGACATGGGAAAGATTAGGAAAGACATACAACAATGGGAACCTTCAAGAGGATGGAATGATTGGACACAAGTGCCCTTCTGTTCACACCATTTCCATGAGTTAATCATGAAAGACGGTCGCGTACTCGTTGTTCCATGTAGAAACCAAGATGAACTGATTGGCAGAGCCCGAATCTCCCAAGGAGCAGGGTGGTCTTTGCGGGAGACGGCCTGTTTGGGGAAGTCTTACGCCCAAATGTGGAGCTTGATGTACTTCCACAGACGCGACCTCAGGCTGGCGGCAAATGCTATTTGCTCGGCAGTACCATCACATTGGGTTCCAACAAGTCGAACAACCTGGTCCATACATGCTAAACATGAATGGATGACAACGGAAGACATGCTGACAGTCTGGAACAGGGTGTGGATTCAAGAAAACCCATGGATGGAAGACAAAACTCCAGTGGAATCATGGGAGGAAATCCCATACTTGGGGAAAAGAGAAGACCAATGGTGCGGCTCATTGATTGGGTTAACAAGCAGGGCCACCTGGGCAAAGAACATCCAAGCAGCAATAAATCAAGTTAGATCCCTTATAGGCAATGAAGAATACACAGATTACATGCCATCCATGAAAAGATTCAGAAGAGAAGAGGAAGAAGCAGGAGTTCTGTGGTAGAAAGCAAAACTAACATGAAACAAGGCTAGAAGTCAGGTCGGATTAAGCCATAGTACGGAAAAAACTATGCTACCTGTGAGCCCCGTCCAAGGACGTTAAAAGAAGTCAGGCCATCATAAATGCCATAGCTTGAGTAAACTATGCAGCCTGTAGCTCCACCTGAGAAGGTGTAAAAAATCCGGGAGGCCACAAACCATGGAAGCTGTACGCATGGCGTAGTGGACTAGCGGTTAGAGGAGACCCCTCCCTTACAAATCGCAGCAACAATGGGGGCCCAAGGCGAGATGAAGCTGTAGTCTCGCTGGAAGGACTAGAGGTTAGAGGAGACCCCCCCGAAACAAAAAACAGCATATTGACGCTGGGAAAGACCAGAGATCCTGCTGTCTCCTCAGCATCATTCCAGGCACAGAACGCCAGAAAATGGAATGGTGCTGTTGAATCAACAGGTTCT
    '''
#==========================================Part A=================================================

def sequence():
    Fragments = []
    The_Last_Possible_Start_Point = len(G) - 100
    for i in range(100000):
        random_number = random.randint(0, The_Last_Possible_Start_Point)
        temp = G[random_number:random_number + 99]
        Fragments.append(temp)
    return Fragments

def counter():
    coun = 0
    Sequence = sequence()
    unique = []
    seen = set()
    for s in Sequence:
        if s not in seen:
            unique.append(s)
            seen.add(s)
            coun = coun + 1
    return coun


def count_average_unique():
    sum =0
    for i in range(100):
        uniq = counter()
        sum = sum + uniq
    ave = sum/100.00
    return ave

average_unique = count_average_unique()
print(average_unique)

#==========================================Part B=================================================
def with_1_percent_error_sequence():
    Sequence = sequence()
    Error_Sequence =[]
    for s in Sequence:
        for i in range(len(s)):
            check = random.randint(1, 100)
            if check == 1:
                if s[i] == 'A':
                    replace = random.choice("GCT")
                    s = s[0:i] + replace + s[i:]
                elif s[i] == 'C':
                    replace = random.choice("AGT")
                    s = s[0:i] + replace + s[i:]
                elif s[i] == 'G':
                    replace = random.choice("ACT")
                    s = s[0:i] + replace + s[i:]
                else:
                    replace = random.choice("ACG")
                    s = s[0:i] + replace + s[i:]
        Error_Sequence.append(s)

    return Error_Sequence



def with_1_percent_error_counter():
    coun = 0
    Sequence = with_1_percent_error_sequence()
    unique = []
    seen = set()
    for s in Sequence:
        if s not in seen:
            unique.append(s)
            seen.add(s)
            coun = coun + 1
    return coun


def with_1_percent_error_count_average_unique():
    sum =0
    for i in range(100):
        uniq = with_1_percent_error_counter()
        sum = sum + uniq
    ave = sum/100.00
    return ave


with_1_percent_error_average_unique = with_1_percent_error_count_average_unique()
print(with_1_percent_error_average_unique)

#==========================================Part C=================================================
def with_5_percent_error_sequence():
    Sequence = sequence()
    Error_Sequence =[]
    for s in Sequence:
        for i in range(len(s)):
            check = random.randint(1, 100)
            if check <= 5:
                if s[i] == 'A':
                    replace = random.choice("GCT")
                    s = s[0:i] + replace + s[i:]
                elif s[i] == 'C':
                    replace = random.choice("AGT")
                    s = s[0:i] + replace + s[i:]
                elif s[i] == 'G':
                    replace = random.choice("ACT")
                    s = s[0:i] + replace + s[i:]
                else:
                    replace = random.choice("ACG")
                    s = s[0:i] + replace + s[i:]
        Error_Sequence.append(s)

    return Error_Sequence



def with_5_percent_error_counter():
    coun = 0
    Sequence = with_5_percent_error_sequence()
    unique = []
    seen = set()
    for s in Sequence:
        if s not in seen:
            unique.append(s)
            seen.add(s)
            coun = coun + 1
    return coun


def with_5_percent_error_count_average_unique():
    sum =0
    for i in range(100):
        uniq = with_5_percent_error_counter()
        sum = sum + uniq
    ave = sum/100.00
    return ave


with_5_percent_error_average_unique = with_5_percent_error_count_average_unique()
print(with_5_percent_error_average_unique)
